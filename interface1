library(shiny)
library(readxl)
library(magick)
library(tcltk)
library(base64enc)

# Caminho fixo da pasta com imagens
img_folder <- "C:/Users/DELL/Desktop/Artigo 2_TC/Arquivos ArcGis/LULC_GDEs_50m/GDEs_50m_lulc_1m/recortes_por_feicao/series_temporais_de_lulc_tiradas"

# Selecionar Excel com os dados
excel_file <- tk_choose.files(caption = "Selecione o arquivo Excel com nascentes e propriedades", multi = FALSE)
if (length(excel_file) == 0 || excel_file == "") stop("Nenhum arquivo selecionado.")
df <- read_excel(excel_file)

# Função da legenda
legenda_lulc <- function() {
  classes <- data.frame(
    nome = c("Formação Florestal", "Floresta Plantada", "Pastagem",
             "Mosaico de Usos", "Cultura Temporária", "Rios e Lagos",
             "Área Urbanizada", "Campo Alagado e Área Pantanosa", "Não Observado"),
    cor = c("#1f8d49", "#7a5900", "#edde8e", "#ffefc3",
            "#C27BA0", "#2532e4", "#d4271e", "#519799", "#ffffff")
  )
  
  tags$div(
    tags$h5("Classes de Uso e Cobertura da Terra"),
    tags$div(style = "display: flex; flex-direction: column;",
             lapply(1:nrow(classes), function(i) {
               tags$div(style = "display: flex; align-items: center; margin-bottom: 6px;",
                        tags$div(style = paste0("width: 20px; height: 20px; background-color:", classes$cor[i],
                                                "; margin-right: 6px; border: 1px solid #000;")),
                        tags$span(classes$nome[i])
               )
             })
    )
  )
}

# UI
ui <- fluidPage(
  titlePanel("Observatório do Uso e Cobertura da Terra em Ecossistemas de Nascentes - APA de Campinas"),
  
  tabsetPanel(
    tabPanel("Buscar por Nascente",
             sidebarLayout(
               sidebarPanel(
                 numericInput("nascente_id", "Digite o ID da Nascente (1–1326):", value = NA, min = 1, max = 1326),
                 textOutput("props_for_nascente"),
                 tags$hr(),
                 legenda_lulc()
               ),
               mainPanel(
                 tags$h4("Mudanças de Uso e Cobertura da Terra (2016–2023)"),
                 uiOutput("image_nascente")
               )
             )
    ),
    
    tabPanel("Buscar por Propriedade",
             sidebarLayout(
               sidebarPanel(
                 numericInput("prop_id", "Digite o ID da Propriedade (1–675):", value = NA, min = 1, max = 675),
                 textOutput("nascentes_for_prop"),
                 tags$hr(),
                 legenda_lulc()
               ),
               mainPanel(
                 tags$h4("Mudanças de Uso e Cobertura da Terra (2016–2023)"),
                 uiOutput("image_propriedade")
               )
             )
    )
  )
)

# Server
server <- function(input, output, session) {
  
  output$props_for_nascente <- renderText({
    req(input$nascente_id)
    props <- unique(df[df$id == input$nascente_id, "id CAR"][[1]])
    if (length(props) == 0) return("Nenhuma propriedade encontrada.")
    paste("Propriedade(es) da nascente:", paste(props, collapse = ", "))
  })
  
  output$nascentes_for_prop <- renderText({
    req(input$prop_id)
    nascentes <- unique(df[df[["id CAR"]] == input$prop_id, "id"][[1]])
    if (length(nascentes) == 0) return("Nenhuma nascente encontrada.")
    paste("Nascente(es) na propriedade:", paste(nascentes, collapse = ", "))
  })
  
  output$image_nascente <- renderUI({
    req(input$nascente_id)
    nasc_id <- sprintf("%04d", input$nascente_id)
    file_path <- file.path(img_folder, paste0(nasc_id, ".jpg"))
    
    if (file.exists(file_path)) {
      tmp <- tempfile(fileext = ".jpg")
      image_read(file_path) %>%
        image_scale("700x") %>%
        image_write(tmp, format = "jpg")
      uri <- dataURI(file = tmp, mime = "image/jpeg")
      
      tagList(
        tags$img(src = uri, style = "max-width: 100%; height: auto; border: 1px solid #ccc; margin-bottom: 10px;")
      )
    } else {
      tags$p("Imagem não encontrada.")
    }
  })
  
  output$image_propriedade <- renderUI({
    req(input$prop_id)
    nasc_ids <- unique(df[df[["id CAR"]] == input$prop_id, "id"][[1]])
    if (length(nasc_ids) == 0) return(tags$p("Nenhuma nascente encontrada."))
    
    imgs <- lapply(nasc_ids, function(nid) {
      nasc_id <- sprintf("%04d", nid)
      file_path <- file.path(img_folder, paste0(nasc_id, ".jpg"))
      if (file.exists(file_path)) {
        tmp <- tempfile(fileext = ".jpg")
        image_read(file_path) %>%
          image_scale("700x") %>%
          image_write(tmp, format = "jpg")
        uri <- dataURI(file = tmp, mime = "image/jpeg")
        
        tagList(
          tags$hr(),
          tags$h5(paste("Nascente", nid)),
          tags$img(src = uri, style = "max-width: 100%; height: auto; border: 1px solid #ccc; margin-bottom: 10px;")
        )
      } else {
        tags$p(paste("Imagem não encontrada para nascente", nid))
      }
    })
    
    do.call(tagList, imgs)
  })
}

# Rodar o app
shinyApp(ui, server)
