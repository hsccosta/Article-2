# --- Bibliotecas --- 
library(shiny)
library(readxl)
library(magick)
library(base64enc)
library(raster)
library(sf)
library(leaflet)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
library(tools)

# --- Caminhos fixos ---
raster_2023_path <- "C:/Users/DELL/Desktop/Artigo 2_TC/Arquivos ArcGis/LULC_GDEs_50m/GDEs_50m_lulc_1m/2023.tif"
shp_apa_path <- "C:/Users/DELL/Desktop/Artigo 2_TC/Arquivos ArcGis/apa_de_campinas.shp"
logos_file <- "C:/Users/DELL/Desktop/Artigo 2_TC/Arquivos ArcGis/logos_combinados.jpg"
img_folder <- "C:/Users/DELL/Desktop/Artigo 2_TC/Arquivos ArcGis/LULC_GDEs_50m/Interface_Observatório das Nascentes/lulc_raw/resymb/tiras_lulc"
shp_recortes <- "C:/Users/DELL/Desktop/Artigo 2_TC/Arquivos ArcGis/LULC_GDEs_50m/Interface_Observatório das Nascentes/lulc_raw/resymb"
save_path <- "C:/Users/DELL/Desktop/Artigo 2_TC/Arquivos ArcGis/LULC_GDEs_50m/Interface_Observatório das Nascentes/repositório"
fotos_path <- file.path(save_path, "fotos")

# Cria as pastas, se não existirem
if (!dir.exists(save_path)) dir.create(save_path, recursive = TRUE)
if (!dir.exists(fotos_path)) dir.create(fotos_path, recursive = TRUE)

# --- Solicita arquivos Excel ao iniciar ---
nascente_excel_path <- file.choose()
classe_excel_path <- file.choose()

# --- Dados base ---
raster_2023 <- raster(raster_2023_path)
shp_apa <- st_read(shp_apa_path, quiet = TRUE)

# --- UI ---
ui <- fluidPage(
  tags$head(
    tags$style(HTML("
      body, .form-control, .selectize-input, .leaflet-popup-content,
      .shiny-output-error-validation, .shiny-output-error,
      h1, h2, h3, h4, h5, h6, label, .leaflet-control, .dataTables_wrapper {
        font-family: 'Times New Roman', serif !important;
      }
      .titulo-principal {
        font-size: 168% !important;
      }
      .titulo-legenda {
        font-size: 98% !important;
        font-weight: bold !important;
      }
      .titulo-mudancas {
        font-size: 156% !important;
      }
      .input-menor label {
        font-size: 104% !important;
      }
      .classe-legenda {
        font-size: 104% !important;
      }
      .label-prop-nasc {
        font-size: 114% !important;
      }
    "))
  ),
  
  tags$img(src = dataURI(file = logos_file, mime = "image/jpeg"), style = "width: 380px;"),
  tags$h2(class = "titulo-principal",
          HTML("Observatório das Mudanças de Uso e Cobertura da Terra em Áreas de Nascentes v.1.0<br>Local: APA de Campinas")),
  
  tabsetPanel(
    tabPanel("Identificação",
             sidebarLayout(
               sidebarPanel(
                 numericInput("nascente_id_ident", "ID da Nascente (1 - 1326):", value = 1, min = 1, max = 1326),
                 uiOutput("props_for_nascente_ident")
               ),
               mainPanel(
                 tags$h4("Caracterização Autodeclarada"),
                 textInput("nome_nascente", "Nome da Nascente:"),
                 textInput("responsavel", "Responsável/Protetor(a):"),
                 selectInput("cercada", "Há Cercamento?", choices = c("Sim", "Não")),
                 fileInput("fotos_nascente", "Fotos:"),
                 textAreaInput("descricao", "Descrição:", "", rows = 3),
                 textAreaInput("oportunidades", "Oportunidades para Conservação e Restauração:", "", rows = 3),
                 textAreaInput("desafios", "Desafios para Conservação e Restauração:", "", rows = 3),
                 checkboxInput("consentimento", "Li e concordo com o termo de consentimento.", value = FALSE),
                 actionButton("salvar_dados", "Salvar Dados")
               )
             )
    ),
    tabPanel("Buscar por Nascente",
             sidebarLayout(
               sidebarPanel(
                 div(class = "input-menor",
                     numericInput("nascente_id", "ID da Nascente (1 - 1326):", value = 1, min = 1, max = 1326)),
                 uiOutput("props_for_nascente"),
                 tags$hr(), legenda_lulc()
               ),
               mainPanel(
                 tags$h4(class = "titulo-mudancas", "Mudanças de Uso e Cobertura da Terra por Ano"),
                 uiOutput("image_nascente")
               )
             )
    ),
    tabPanel("Buscar por Propriedade",
             sidebarLayout(
               sidebarPanel(
                 div(class = "input-menor",
                     numericInput("prop_id", "ID da Propriedade (CAR) (1 - 675):", value = 1, min = 1, max = 675)),
                 uiOutput("nascentes_for_prop"),
                 tags$hr(), legenda_lulc()
               ),
               mainPanel(
                 tags$h4(class = "titulo-mudancas", "Mudanças de Uso e Cobertura da Terra por Ano"),
                 uiOutput("image_propriedade")
               )
             )
    ),
    tabPanel("Classe Predominante",
             sidebarLayout(
               sidebarPanel(
                 selectInput("classe_escolhida", "Escolha uma classe de uso e cobertura da terra:",
                             choices = c("Formação Florestal", "Floresta Plantada", "Pastagem",
                                         "Mosaico de Usos", "Cultura Temporária", "Rios e Lagos",
                                         "Área Urbanizada", "Campo Alagado e Área Pantanosa", "Não Observado")),
                 downloadButton("download_csv", "Baixar CSV"),
                 tags$hr(), legenda_lulc()
               ),
               mainPanel(
                 tags$h4("Feições com essa classe como predominante:"),
                 dataTableOutput("feicoes_predominantes"),
                 tags$h4("Distribuição de Pixels por Classe nas Feições Selecionadas"),
                 plotlyOutput("grafico_classe"),
                 tags$h4("Localização das Feições no Mapa"),
                 leafletOutput("mapa_classe", height = 400)
               )
             )
    ),
    tabPanel("Transições 2022-2023",
             sidebarLayout(
               sidebarPanel(
                 numericInput("id_nascente_viz", "ID da Nascente (1 - 1326):", value = NA, min = 1, max = 1326),
                 numericInput("id_prop_viz", "ID da Propriedade (CAR) (1 - 675):", value = NA, min = 1, max = 675),
                 uiOutput("info_cross_viz"),
                 tags$hr(), legenda_lulc()
               ),
               mainPanel(
                 tags$h4("Feições Correspondentes no Raster (2023.tif):"),
                 plotOutput("plot_raster_viz")
               )
             )
    ),
    tabPanel("Mapa",
             leafletOutput("mapa_apa", height = 600))
  )
)

# --- Server ---
server <- function(input, output, session) {
  df <- reactive({
    dados <- read_excel(nascente_excel_path)
    colnames_lower <- tolower(trimws(names(dados)))
    id_col <- which(colnames_lower == "id")
    idcar_col <- which(colnames_lower %in% c("id car", "idcar", "id_car"))
    if (length(id_col) != 1 || length(idcar_col) != 1) stop("Colunas 'id' e 'id CAR' não encontradas.")
    names(dados)[id_col] <- "id"
    names(dados)[idcar_col] <- "id CAR"
    dados
  })
  
  df_classes <- reactive({
    as.data.frame(read_excel(classe_excel_path))
  })
  
  output$props_for_nascente <- renderUI({
    req(input$nascente_id, df())
    props <- df()[df()$id == input$nascente_id, "id CAR", drop = TRUE]
    tags$p(class = "label-prop-nasc", HTML(paste0("<strong>Propriedade(s):</strong><br><span style='color: #5a7ca9;'>",
                                                  paste(unique(props), collapse = ", "), "</span>")))
  })
  
  output$props_for_nascente_ident <- renderUI({
    req(input$nascente_id_ident, df())
    props <- df()[df()$id == input$nascente_id_ident, "id CAR", drop = TRUE]
    tags$p(class = "label-prop-nasc", HTML(paste0("<strong>Propriedade(s):</strong><br><span style='color: #5a7ca9;'>",
                                                  paste(unique(props), collapse = ", "), "</span>")))
  })
  
  renderImageHelper <- function(nasc_id_val) {
    nasc_id_formatted <- sprintf("%04d", nasc_id_val)
    extensoes <- c(".jpg", ".jpeg", ".png", ".JPG", ".JPEG", ".PNG")
    for (ext in extensoes) {
      file_path <- file.path(img_folder, paste0(nasc_id_formatted, ext))
      if (file.exists(file_path)) {
        tmp <- tempfile(fileext = ".jpg")
        image_read(file_path) %>% image_scale("700x") %>% image_write(tmp)
        uri <- dataURI(file = tmp, mime = "image/jpeg")
        return(tags$img(src = uri, style = "max-width: 100%; height: auto;"))
      }
    }
    tags$p(paste("Imagem não encontrada para a nascente", nasc_id_val))
  }
  
  output$image_nascente <- renderUI({
    req(input$nascente_id)
    tagList(
      tags$div(style = "display: flex; justify-content: space-between; max-width: 700px; margin-bottom: 10px;",
               lapply(2016:2025, function(ano) tags$span(ano))),
      renderImageHelper(input$nascente_id)
    )
  })
  
  output$image_propriedade <- renderUI({
    req(input$prop_id, df())
    nasc_ids <- df()[df()[["id CAR"]] == input$prop_id, "id", drop = TRUE]
    do.call(tagList, lapply(unique(nasc_ids), function(nid) {
      tagList(
        tags$hr(),
        tags$h5(paste("Nascente", nid)),
        tags$div(style = "display: flex; justify-content: space-between; max-width: 700px; margin-bottom: 10px;",
                 lapply(2016:2025, function(ano) tags$span(ano))),
        renderImageHelper(nid)
      )
    }))
  })
  
  observeEvent(input$salvar_dados, {
    req(input$consentimento)
    
    # Dados principais
    dados_salvar <- data.frame(
      ID_Nascente = input$nascente_id_ident,
      Nome_Nascente = input$nome_nascente,
      Responsavel = input$responsavel,
      Cercada = input$cercada,
      Descricao = input$descricao,
      Oportunidades = input$oportunidades,
      Desafios = input$desafios,
      stringsAsFactors = FALSE
    )
    
    # Salva CSV
    file_name <- paste0("nascente_", input$nascente_id_ident, ".csv")
    write.csv(dados_salvar, file = file.path(save_path, file_name), row.names = FALSE)
    
    # Salva Foto, se houver
    if (!is.null(input$fotos_nascente)) {
      file_ext <- file_ext(input$fotos_nascente$name)
      foto_nome <- paste0("nascente_", input$nascente_id_ident, "_foto.", file_ext)
      file.copy(input$fotos_nascente$datapath, file.path(fotos_path, foto_nome), overwrite = TRUE)
    }
    
    showModal(modalDialog("Dados e foto salvos com sucesso!", easyClose = TRUE))
  })
}

# --- Executa o app ---
shinyApp(ui, server)
