library(sf)
library(terra)
library(dplyr)
library(foreach)
library(doParallel)

# Caminhos
dir_dados <- "C:/Users/DELL/Desktop/Artigo 2_TC/Arquivos ArcGis/LULC_GDEs_50m/GDEs_50m_lulc_1m"
shapefile <- file.path(dir_dados, "feicoes.shp")
saida_dir <- file.path(dir_dados, "recortes_por_feicao")
dir.create(saida_dir, showWarnings = FALSE)

# Anos e arquivos raster
anos <- 2016:2023
rasters <- setNames(
  file.path(dir_dados, paste0(anos, ".tif")),
  anos
)

# Carregar feições com atributos
feicoes <- st_read(shapefile)
if (!"fid" %in% names(feicoes)) stop("⚠️ A coluna 'fid' não existe no shapefile.")

# Inicializar paralelização
num_cores <- max(1, parallel::detectCores() - 1)
cl <- makeCluster(num_cores)
registerDoParallel(cl)

# Loop paralelizado por feição
foreach(i = 1:nrow(feicoes), .packages = c("terra", "sf")) %dopar% {
  tryCatch({
    feicao <- feicoes[i, ]
    id <- as.character(feicao$fid)
    feicao_vect <- terra::vect(feicao)
    
    # Criar pasta por feição
    pasta_feicao <- file.path(saida_dir, paste0("feicao_", id))
    dir.create(pasta_feicao, showWarnings = FALSE, recursive = TRUE)
    
    for (ano in anos) {
      raster_path <- rasters[as.character(ano)]
      
      if (!file.exists(raster_path)) {
        cat("⚠️ Raster não encontrado:", raster_path, "\n")
        next
      }
      
      raster_base <- try(terra::rast(raster_path), silent = TRUE)
      if (inherits(raster_base, "try-error")) {
        cat("❌ Erro ao ler raster:", raster_path, "\n")
        next
      }
      
      # Reprojetar feição
      feicao_proj <- terra::project(feicao_vect, terra::crs(raster_base))
      
      # Recorte e máscara
      recorte <- terra::mask(terra::crop(raster_base, feicao_proj), feicao_proj)
      
      # Caminho de saída
      nome_saida <- file.path(pasta_feicao, paste0(ano, ".tif"))
      
      # Exportar
      terra::writeRaster(recorte, nome_saida, overwrite = TRUE)
    }
    
    cat("✅ Feição fid", id, "exportada com sucesso.\n")
  },
  error = function(e) {
    cat("❌ Erro na feição", i, "-", conditionMessage(e), "\n")
  })
}

# Finalizar cluster
stopCluster(cl)

cat("🎉 Exportação concluída. Arquivos estão em:\n", saida_dir, "\n")
