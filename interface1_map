# --- Bibliotecas ---
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(readxl)
library(DT)
library(mapview)
library(webshot2)  # Para salvar mapa como imagem

# --- UI ---
ui <- dashboardPage(
  dashboardHeader(title = "Mapa da APA de Campinas"),
  dashboardSidebar(
    tags$head(tags$style(HTML(".blink { animation: blink-animation 1s steps(5, start) infinite; } @keyframes blink-animation { to { fill-opacity: 0.2; } }"))),
    sidebarMenu(
      menuItem("Mapa", tabName = "mapa", icon = icon("map")),
      menuItem("Sobre", tabName = "sobre", icon = icon("info-circle")),
      checkboxGroupInput("camadas_visiveis", "Camadas visíveis:",
                         choices = c("APA de Campinas", "APA CAR", "GDEs 50m"),
                         selected = c("APA de Campinas", "APA CAR", "GDEs 50m")),
      selectInput("id_sel", "Destacar feição GDEs (ID):", choices = NULL),
      selectInput("id_car", "Destacar feição CAR (ID):", choices = NULL),
      div(style = "position: absolute; bottom: 20px; width: 100%; text-align: center;",
          downloadButton("exportar_mapa", "Exportar Mapa (.png)")
      )
    )
  ),
  dashboardBody(
    tabItems(
      tabItem(tabName = "mapa",
              fluidRow(
                box(width = 12, leafletOutput("mapa_interativo", height = 600))
              ),
              fluidRow(
                box(width = 12, DTOutput("tabela_atributos"))
              )
      ),
      tabItem(tabName = "sobre",
              h2("Sobre este Aplicativo"),
              p("Este aplicativo exibe camadas geográficas da APA de Campinas com destaque por feição."),
              tags$ul(
                tags$li("Camadas: APA, CAR, GDEs"),
                tags$li("Destaque de feições por ID"),
                tags$li("Exportação de mapa como imagem"),
                tags$li("Visualização dos atributos da feição selecionada")
              )
      )
    )
  )
)

# --- Server ---
server <- function(input, output, session) {
  
  path_apa    <- "C:/Users/DELL/Desktop/Artigo 2_TC/Arquivos ArcGis/LULC_GDEs_50m/Interface_Observatório das Nascentes/apa_de_campinas.shp"
  path_car    <- "C:/Users/DELL/Desktop/Artigo 2_TC/Arquivos ArcGis/LULC_GDEs_50m/Interface_Observatório das Nascentes/apa_car.shp"
  path_gdes   <- "C:/Users/DELL/Desktop/Artigo 2_TC/Arquivos ArcGis/LULC_GDEs_50m/Interface_Observatório das Nascentes/GDEs_50m.shp"
  dados_excel <- read_excel("C:/Users/DELL/Desktop/Artigo 2_TC/Arquivos ArcGis/LULC_GDEs_50m/Interface_Observatório das Nascentes/0001.xlsx")
  
  shape_apa <- reactive({ st_transform(st_read(path_apa, quiet = TRUE), 4326) })
  shape_car <- reactive({ st_transform(st_read(path_car, quiet = TRUE), 4326) })
  shape_gdes <- reactive({ st_transform(st_read(path_gdes, quiet = TRUE), 4326) })
  
  observe({
    updateSelectInput(session, "id_sel", choices = unique(as.character(dados_excel$id)))
    updateSelectInput(session, "id_car", choices = unique(as.character(dados_excel$`id CAR`)))
  })
  
  output$mapa_interativo <- renderLeaflet({
    bounds <- st_bbox(shape_apa())
    leaflet() %>%
      addProviderTiles("Esri.WorldTopoMap") %>%
      fitBounds(bounds[[1]], bounds[[2]], bounds[[3]], bounds[[4]])
  })
  
  observe({
    leafletProxy("mapa_interativo") %>% 
      clearGroup("APA de Campinas") %>% 
      clearGroup("APA CAR") %>% 
      clearGroup("GDEs 50m") %>%
      clearGroup("Destacado")
    
    if ("APA de Campinas" %in% input$camadas_visiveis) {
      leafletProxy("mapa_interativo") %>%
        addPolygons(data = shape_apa(), fillColor = "transparent", color = "#555", weight = 1.5, group = "APA de Campinas")
    }
    if ("APA CAR" %in% input$camadas_visiveis) {
      leafletProxy("mapa_interativo") %>%
        addPolygons(data = shape_car(), fillColor = "lightgray", fillOpacity = 0.4, color = "#666", weight = 2, group = "APA CAR")
    }
    if ("GDEs 50m" %in% input$camadas_visiveis) {
      leafletProxy("mapa_interativo") %>%
        addPolygons(data = shape_gdes(), fillColor = "transparent", color = "black", weight = 1, group = "GDEs 50m")
    }
    
    if (!is.null(input$id_sel) && input$id_sel %in% as.character(dados_excel$id)) {
      shape_gdes_data <- shape_gdes()
      destaque <- shape_gdes_data[as.character(shape_gdes_data$id) == input$id_sel, ]
      if (nrow(destaque) > 0) {
        leafletProxy("mapa_interativo") %>%
          addPolygons(data = destaque, fillColor = "yellow", fillOpacity = 0.8, color = "black", weight = 2,
                      group = "Destacado", options = pathOptions(className = "blink"))
      }
    }
    
    if (!is.null(input$id_car) && input$id_car %in% as.character(dados_excel$`id CAR`)) {
      shape_car_data <- shape_car()
      if ("id" %in% names(shape_car_data)) {
        destaque_car <- shape_car_data[as.character(shape_car_data$id) == input$id_car, ]
        if (nrow(destaque_car) > 0) {
          leafletProxy("mapa_interativo") %>%
            addPolygons(data = destaque_car, fillColor = "lightgray", fillOpacity = 0.4, color = "#666", weight = 2, group = "Destacado")
        }
      }
    }
  })
  
  output$tabela_atributos <- renderDT({
    if (!is.null(input$id_sel) && input$id_sel %in% as.character(dados_excel$id)) {
      dados_excel[dados_excel$id == input$id_sel, ]
    }
  })
  
  output$exportar_mapa <- downloadHandler(
    filename = function() { paste0("mapa_destacado_", input$id_sel, ".png") },
    content = function(file) {
      bounds <- st_bbox(shape_apa())
      map <- leaflet() %>%
        addProviderTiles("Esri.WorldTopoMap") %>%
        fitBounds(bounds[[1]], bounds[[2]], bounds[[3]], bounds[[4]])
      
      if ("APA de Campinas" %in% input$camadas_visiveis) {
        map <- map %>% addPolygons(data = shape_apa(), color = "#555", weight = 1.5, fillOpacity = 0)
      }
      if ("APA CAR" %in% input$camadas_visiveis) {
        map <- map %>% addPolygons(data = shape_car(), color = "#666", weight = 2, fillColor = "lightgray", fillOpacity = 0.2)
      }
      if ("GDEs 50m" %in% input$camadas_visiveis) {
        map <- map %>% addPolygons(data = shape_gdes(), color = "black", weight = 1, fillOpacity = 0)
      }
      
      if (!is.null(input$id_sel) && input$id_sel %in% as.character(dados_excel$id)) {
        shape_gdes_data <- shape_gdes()
        destaque <- shape_gdes_data[as.character(shape_gdes_data$id) == input$id_sel, ]
        map <- map %>% addPolygons(data = destaque, color = "black", weight = 2, fillColor = "yellow", fillOpacity = 0.8)
      }
      
      mapshot(map, file = file)
    }
  )
}

# --- Rodar app ---
shinyApp(ui, server)
